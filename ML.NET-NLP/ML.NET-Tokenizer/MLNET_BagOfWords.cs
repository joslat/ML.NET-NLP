using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ML;
using Microsoft.ML.Data;

namespace ML.NET_NLP
{
    public class MLNET_BagOfWords
    {
        public void Generate(string text)
        {
            var context = new MLContext();
            var data = new List<TextData>();
            data.Add(new TextData { Text = text });
            var dataView = context.Data.LoadFromEnumerable(data);

            var detectedLanguage = MLNET_LanguageDetector.DetectLanguageMsML(text);

            //var bagOfWordsPipeline = context.Transforms.Text.TokenizeIntoWords(
            //                    MLNET_Params.OutputColumnName,
            //                    MLNET_Params.InputColumnName,
            //                    MLNET_Params.Separators)
            //    .Append(context.Transforms.Text.RemoveDefaultStopWords(
            //                    MLNET_Params.OutputColumnName,
            //                    MLNET_Params.OutputColumnName,
            //                    detectedLanguage
            //                    ))
            //    .Append(context.Transforms.Text.RemoveStopWords(
            //                    MLNET_Params.OutputColumnName,
            //                    MLNET_Params.OutputColumnName,
            //                    MLNET_Params.CustomStopWords
            //                    ))
            //    .Append(context.Transforms.Conversion.MapValueToKey(MLNET_Params.OutputColumnName))
            //    .Append(context.Transforms.Text.ProduceWordBags(
            //        "BagOfWords",
            //        MLNET_Params.InputColumnName,
            //        ngramLength: 1,
            //        useAllLengths: false,
            //        weighting: Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria.TfIdf 
            //        ));

            var bagOfWordsPipeline =
                context.Transforms.Text.TokenizeIntoWords(
                                MLNET_Params.OutputColumnName,
                                MLNET_Params.InputColumnName,
                                MLNET_Params.Separators)
                .Append(context.Transforms.Text.RemoveDefaultStopWords(
                                MLNET_Params.OutputColumnName,
                                MLNET_Params.OutputColumnName,
                                detectedLanguage
                                ))
                .Append(context.Transforms.Text.RemoveStopWords(
                                MLNET_Params.OutputColumnName,
                                MLNET_Params.OutputColumnName,
                                MLNET_Params.CustomStopWords
                                ))
                .Append(context.Transforms.Text.ProduceWordBags(
                                "BagOfWords",
                                MLNET_Params.OutputColumnName,
                                ngramLength: 1,
                                useAllLengths: false,
                                weighting: Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria.Tf));

            var fittedData = bagOfWordsPipeline.Fit(dataView);
            var dataTransformed = fittedData.Transform(dataView);

            var predictionEngine = context.Model.CreatePredictionEngine<TextData,TextBagOfWords>(fittedData);
            var prediction = predictionEngine.Predict(data[0]);

            VBuffer<ReadOnlyMemory<char>> slotNames = default;
            dataTransformed.Schema["BagOfWords"].GetSlotNames(ref slotNames);
            var bagOfWordColumn  = dataTransformed.GetColumn<VBuffer<float>>(dataTransformed.Schema["BagOfWords"]);
            var slots = slotNames.GetValues();

            Console.WriteLine("NGrams generated by the BagOfWords: ");

            foreach (var row in bagOfWordColumn )
            {
                foreach (var item in row.Items())
                {
                    Console.WriteLine($"{slots[item.Key]} ");
                }

                Console.WriteLine();
            }

            Console.Write("Word Counts: ");
            for (int i = 0; i < prediction.BagOfWords.Length; i++)
            {
                Console.Write($"{prediction.BagOfWords[i]}  ");
            }

            Console.WriteLine();
        }
    }
}
